<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker 安装MySQL远程连接]]></title>
    <url>%2F2019%2F07%2F12%2Fdocker-%E5%AE%89%E8%A3%85MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[docker 安装mysql远程连接1.下载Mysql的Docker镜像： ​ docker search mysql (搜索mysql镜像) ​ docker pull mysql （下载mysql镜像，默认最新版本） 运行镜像，设置root账号初始密码（123456 ），映射本地宿主机端口3306到Docker端口3306。测试过程没有挂载本地数据盘： docker run -it –rm –name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql 查看已运行的容器： docker ps -a 进入mysql容器： docker exec -it mysql bash 在容器内登陆Mysql: mysql -uroot -p123456 查看用户信息 select host,user,plugin,authentication_string from mysql.user; 解决navicat远程连接mysql时的错误：can’t connect to mysql server on ‘192.168.247.128’ ALTER user ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123456’;]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA+Maven+JavaWeb+tomcat项目搭建（图文并茂，详细）]]></title>
    <url>%2F2019%2F05%2F07%2F%C2%96IDEA-Maven-JavaWeb-tomcat%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%EF%BC%88%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82%EF%BC%8C%E8%AF%A6%E7%BB%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言:网上有很多idea+maven+web+tomcat部署的例子，可是基本都不是完整详细的，对于习惯了Eclipse的同学，突然换idea还是需要点时间适应的，这个过程简单但也是痛苦的，为了使更多的初学者不走弯路，下面给大家列一份详细的步骤，并全部以截图展示一、创建Maven项目1:如果刚打开IDEA,显示的是这个页面，我们直接单击 Create New Project（创建项目） 或者 File—&gt; New—&gt; Project 2:选中左侧的Maven –&gt; 右侧选则你的jdk –&gt; 勾选Create from archetype –&gt;再选择maven-archetype-webapp –&gt; 选好后再选择Next 3: 因为是maven项目，所以需要项目的Groupid, ArtifactId, Version 这是Maven项目的坐标，必填.GroupId:实际对应JAVA的包的结构，是main目录里java的目录结构。ArtifactID:就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。 4:选择本地maven安装路径，正常情况下其他参数不用修改，但是这样会比较慢，有时候如果网速不好，就会卡的比较久，这是因为maven这个骨架会从远程仓库加载archetype元数据，但是archetype又比较多，所以比较卡，这时候可以加个属性 archetypeCatelog = internal，表示仅使用内部元数据，点击右边的蓝色“+”号 5:输入Project name，输入project name 后，我们会发现下面的Module name跟上面一样，但有时候我们的项目比较大，会分好几个module，这时候可以输入自己的module name，当然也可以不改，则 module name 和 project name一样,这里我把module name改为了”api”。 6:单击Finish， 项目会去配置的仓库中下载对应的构件和依赖. 7:这时候已经完成大部分了，不过我们还需要新建几个目录文件，因为maven项目的文件结构是 src-main-Java / resources，src-test-java/resources，但骨架只自带了resources，所以需要我们手动添加文件目录。如果不知道具体怎么操作，详见：https://blog.csdn.net/weixin_33446857/article/details/82155633 最终结构如下图： 二、配置Tomcat1:在主页面打开ProjectStructure, File –&gt;Project Struture添加web选项，表明是一个web项目. 2:打开ProjectStructure后，按照图示依次点击Facets-&gt;+号,在弹出的对话框个中选择Web. 3:在弹出的对话框选择刚才创建的Maven项目（api），点击ok. 4:这里 点击Create artifact，创建web项目导出配置 5:点击Create artifact后，会自动跳到Artifacts标签。 6:选中Modules标签，点击+号，添加一个文件路径，指向你项目的webapp目录 7 :单击OK 8:给项目添加Tomcat 服务器 run –&gt; Edit Configurtions… 9:点击+号，选择Tomcat Server –&gt; Local 10:选中Server选项卡，Name这里可以写tomcat的名字，也可以不改，使用默认的。端口号默认是8080，根据自身需要是否更改，这里我未做更改。 11:选中Deployment选项卡，点击+号，点击Artifact,最后点击ok,完成。 12:启动Tomcat 13:浏览器输入 localhost:8080 大功告成]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[mybatis的入门]]></title>
    <url>%2F2019%2F05%2F01%2Fmybatis%E7%9A%84%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[mybatis的环境搭建第一步：创建maven工程并导入坐标 第二步：创建实体类和dao接口 第三步：创建mybatis的主配置文件SqlMapConfig.xml 第四步：创建映射配置文件IUserDao.xml 环境搭建的注意事项第一个：在idea中创建目录的时候，它和包是不一样的，包在创建的时候com.iflytek.dao它是三级结构；目录在创建时com.iflytek.dao是一级目录 第二个：mybatis的映射配置文件位置必须和dao接口的包结构相同 第三个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名 第四个：映射配置文件的操作(select,delet…)，id属性的取值必须是dao接口的方法名 当我们遵从了第二、三、四点之后，我们在开发中就无需再写dao的实现类。 ​]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dao层代码编写]]></title>
    <url>%2F2019%2F05%2F01%2Fdao%E5%B1%82%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99%2F</url>
    <content type="text"><![CDATA[这次主要记录一下如何利用maven结合mybatis对dao层进行操作。首先建立一个maven的工程(这里就不详述如何建立maven工程了),maven工程建立好之后，目录如图所示： 这里省略创建数据库的操作。 下面是pom.xml配置文件内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.iflytek&lt;/groupId&gt; &lt;artifactId&gt;maven_day02_1&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!--统一管理jar包版本--&gt; &lt;properties&gt; &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt; &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt; &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt; &lt;shiro.version&gt;1.2.3&lt;/shiro.version&gt; &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt; &lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt; &lt;spring.security.version&gt;5.0.1.RELEASE&lt;/spring.security.version&gt; &lt;/properties&gt; &lt;!--锁定jar包版本--&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!-- 项目依赖的jar包--&gt; &lt;dependencies&gt; &lt;!--spring--&gt; &lt;dependency&gt; &lt;groupId&gt;org.aspectj&lt;/groupId&gt; &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt; &lt;version&gt;1.6.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aop&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--log start--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt; &lt;type&gt;jar&lt;/type&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.security.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--添加tomcat插件--&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 一：创建实体类(Items)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.iflytek.domain;import java.util.Date;public class Items &#123; private int id; private String name; private Double price; private String pic; public Double getPrice() &#123; return price; &#125; public void setPrice(Double price) &#123; this.price = price; &#125; public String getPic() &#123; return pic; &#125; public void setPic(String pic) &#123; this.pic = pic; &#125; public Date getCreatetime() &#123; return createtime; &#125; public void setCreatetime(Date createtime) &#123; this.createtime = createtime; &#125; public String getDetail() &#123; return detail; &#125; public void setDetail(String detail) &#123; this.detail = detail; &#125; private Date createtime; private String detail; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; 二：创建一个接口(ItemsDao)1234567package com.iflytek.dao;import com.iflytek.domain.Items;public interface ItemsDao &#123; public Items findById(int id);&#125; 因为我们使用mybatis框架，所以必须要创建一个接口，并且不用写这个接口的实现类，mybatis框架会自动生成该接口的代理对象，所以接下来需要在resources下面创建一个跟接口在同一个包路径下面的包来放置 mapper映射文件。 三：创建maper映射文件在resources下创建mapper映射文件 在resources/com.iflytek.dao下面创建一个ItemsDao.xml文件并且导入约束 123456789&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.iflytek.dao.ItemsDao"&gt; &lt;select id="findById" parameterType="int" resultType="items"&gt; select * from items where id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 注意：namespace要遵循mybatis规范，要和接口的全限定名保持一致；id要和方法名保持一致 四：在resources下创建spring的配置文件(applicationContext.xml)12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt; &lt;!--配置连接池--&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql:///maven"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="ok"/&gt; &lt;/bean&gt; &lt;!--配置生产sqlsession对象的工厂--&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!--扫面pojo包，给包下所有pojo对象起别名--&gt; &lt;property name="typeAliasesPackage" value="com.iflytek.domain"/&gt; &lt;/bean&gt; &lt;!--扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.iflytek.dao"/&gt; &lt;/bean&gt;&lt;/beans&gt; 五：单元测试（ItemsTest）12345678910111213141516package com.iflytek.test;import com.iflytek.dao.ItemsDao;import com.iflytek.domain.Items;import org.junit.Test;import org.springframework.context.support.ClassPathXmlApplicationContext;public class ItemsTest &#123; @Test public void findById()&#123; ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml"); ItemsDao itemsDao = applicationContext.getBean(ItemsDao.class); Items items=itemsDao.findById(1); System.out.println(items.getName()); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis maven spring dao</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring boot入门小案例]]></title>
    <url>%2F2019%2F04%2F28%2Fspring-boot%E5%85%A5%E9%97%A8%E5%B0%8F%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[今天说说如何用IDEA快速入门spring boot 首先按照以下步骤建立一个maven的java web项目 然后完善工程目录如图所示，这里要注意一点接口包controller和启动类startDemo必须在同一个包(我这里是com.iflytek)下面。 配置pom.xml文件 12345&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt;&lt;/parent&gt; 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; startDemo.java 1234567891011package com.iflytek;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class startDemo &#123; public static void main(String[] args) &#123; SpringApplication.run(startDemo.class,args); &#125;&#125; test.java 123456789101112package com.iflytek.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class test &#123; @RequestMapping("/fun") public String fun()&#123; return "hello spring boot"; &#125;&#125; 在浏览器端输入地址:http://localhost:8080/fun]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA中配置文件的错误使用]]></title>
    <url>%2F2019%2F01%2F23%2FJAVA%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E9%94%99%E8%AF%AF%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[java中的配置文件会自动将等号的右边解析为字符串，所以如果加双引号的话，这个双引号就会被解析为字符串的一部分，这一点一定要注意，否则会引起一些不必要的麻烦。下面记录一下因为这点没注意到而引发的错误。 首先来看一下配置文件里面的内容： 然后运行TestDBCUtils.java就会报错：说找不到这个驱动 错误的原因是：配置文件中的双引号被解析为字符串的一部分了，把配置文件中的双引号去掉问题就解决了]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[junit单元测试使用]]></title>
    <url>%2F2019%2F01%2F22%2Fjunit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[当我们在编写一个大型项目的时候，如果想快速定位到我们需要调试的代码块是一件非常不容易的事情，所以今天就来讲讲junit的使用，可以把它想象成一个main函数，我们想要运行哪一个代码块就运行哪个代码块。 使用右击工程—》Build Path—》Add Libraries—》JUnit 然后在需要运行的函数前面加上@Test并导包： import org.junit.Test;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tensorflow中name&variable_scope]]></title>
    <url>%2F2019%2F01%2F19%2Ftensorflow%E4%B8%ADname-variable-scope%2F</url>
    <content type="text"><![CDATA[在tensorflow中,有两个scope,一个是name_scope一个是variable_scope,这两个scope到底有什么区别呢? 先看第一个程序: with tf.name_scope(“hello”) as name_scope: ​ arr1 = tf.get_variable(“arr1”, shape=[2,10],dtype=tf.float32) ​ print (name_scope) ​ print (arr1.name) ​ print (“scope_name:%s “%tf.get_variable_scope().original_name_scope) 输出为： hello/ arr1:0 scope_name: 可以看出: tf.name_scope() 返回的是 一个string,”hello/” 在name_scope中定义的variable的name并没有“hello/”前缀 tf.get_variable_scope()的original_name_scope是空 第二个程序: with tf.variable_scope(“hello”) as variable_scope:​ arr1 = tf.get_variable(“arr1”, shape=[2, 10], dtype=tf.float32) ​ print (variable_scope)​ print (variable_scope.name) #打印出变量空间名字​ print (arr1.name)​ print (tf.get_variable_scope().original_name_scope)​ #tf.get_variable_scope() 获取的就是variable_scope ​ with tf.variable_scope(“xixi”) as v_scope2:​ print (tf.get_variable_scope().original_name_scope)​ #tf.get_variable_scope() 获取的就是v _scope2 输出为: &lt;tensorflow.python.ops.variable_scope.VariableScopeobject at0x7fbc09959210&gt;hellohello/arr1:0hello/hello/xixi/ 可以看出： tf.variable_scope()返回的是一个 op对象 variable_scope中定义的variable的name加上了”hello/”前缀 tf.get_variable_scope()的original_name_scope是 嵌套后的scope name 第三个程序: with tf.name_scope(“name1”):​ with tf.variable_scope(“var1”):​ w = tf.get_variable(“w”,shape=[2])​ res = tf.add(w,[3]) print w.name print res.name 输出为： var1/w:0name1/var1/Add:0 可以看出：variable scope和name scope都会给op的name加上前缀 对比三个个程序可以看出: name_scope对get_variable()创建的变量 的名字不会有任何影响,而创建的op会被加上前缀. tf.get_variable_scope()返回的只是 variable_scope,不管name_scope.所以以后我们在使用tf.get_variable_scope().reuse_variables() 时可以无视name_scope 其它 withtf.name_scope(“scope1”) as scope1:​ withtf.name_scope(“scope2”) as scope2:​ print scope2 输出： scope1/scope2/ importtensorflow as tfwith tf.variable_scope(“scope1”) as scope1:​ withtf.variable_scope(“scope2”) as scope2:​ print scope2.name 输出为： scope1/scope2 name_scope可以用来干什么? 典型的TensorFlow可以有数以千计的节点，如此多而难以一下全部看到，甚至无法使用标准图表工具来展示。为简单起见，我们为op/tensor名划定范围，并且可视化把该信息用于在图表中的节点上定义一个层级。默认情况下，只有顶层节点会显示。下面这个例子使用tf.name_scope在hidden命名域下定义了三个操作: import tensorflow as tf with tf.name_scope(‘hidden’) as scope: a = tf.constant(5, name=’alpha’) W = tf.Variable(tf.random_uniform([1, 2], -1.0, 1.0), name=’weights’) b = tf.Variable(tf.zeros([1]), name=’biases’) print (a.name) print (W.name) print (b.name) 结果是得到了下面三个操作名: hidden/alpha :0 hidden/weights :0 hidden/biases :0 name_scope 是给op_name加前缀,variable_scope是给get_variable()创建的变量的名字加前缀。 tf.variable_scope有时也会处理命名冲突 import tensorflow as tf def test(name=None):​ with tf.variable_scope(name, default_name=”scope”) as scope:​ w = tf.get_variable(“w”, shape=[2, 10]) test() test() ws = tf.trainable_variables() for w in ws:​ print(w.name) 输出： scope/w:0scope_1/w:0 可以看出，如果只是使用default_name这个属性来创建variable_scope的时候，会处理命名冲突 总结简单来看 使用tf.Variable()的时候，tf.name_scope()和tf.variable_scope() 都会给 Variable 和 op 的 name属性加上前缀。 使用tf.get_variable()的时候，tf.name_scope()就不会给 tf.get_variable()创建出来的Variable加前缀。]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[slim库]]></title>
    <url>%2F2019%2F01%2F19%2Fslim%E5%BA%93%2F</url>
    <content type="text"><![CDATA[slim.arg_scope原理分析slim.arg_scope的实现使用了装饰器和上下文管理器. 弄清楚这两个语法才能看明白它的源码. 使用方式slim.arg_scope常用于为tensorflow里的layer函数提供默认值以使构建模型的代码更加紧凑苗条(slim): importtensorflow as tfslim = tf.contrib.slimwith slim.arg_scope(​ [layers.conv2d],​ padding=’SAME’,​ initializer=xavier_initializer(),​ regularizer=l2_regularizer(0.05)):​ net = slim.conv2d(net, 256, [5, 5]) 并不是所有的方法都能用arg_scope设置默认参数, 只有用@slim.add_arg_scope修饰过的方法才能使用arg_scope. 所以, 要使slim.arg_scope正常运行起来, 需要两个步骤: 用@add_arg_scope修饰目标函数 用witharg_scope(…) 设置默认参数. 下面举一个列子： import tensorflow as tf slim = tf.contrib.slim @slim.add_arg_scope def fun(parm1,parm2): ​ print(parm1) ​ print(parm2) with slim.arg_scope([fun], parm1=’SAME’,parm2=’VALID’) as arg_sc: ​ fun() 运行上面代码结果：SAME VALID]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>slim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[np.array()和np.asarray()的区别]]></title>
    <url>%2F2019%2F01%2F18%2Fnp-array-%E5%92%8Cnp-asarray-%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[array和asarray都可以将结构数据转化为ndarray,主要区别是当源数据已经是ndarray类型时，array依然会拷贝一份，而asarray不会；当源数据不是ndarray类型时，两者没有区别(都会拷贝一份)。 例一： import numpy as np a=[[1,1,1],[1,1,1]]b=np.array(a)c=np.asarray(a) a[1][1]=2 print(a)print(b)print(c) 输出： [[1,1,1],[1,2,1]] [[1 1 1] [1 1 1]] [[1 1 1] [1 1 1]] 例二： import numpy as np a=np.zeros([2,3])b=np.array(a)c=np.asarray(a) a[1][1]=2 print(a)print(b)print(c) 输出: [[0. 0. 0.] [0. 2. 0.]] [[0. 0. 0.] [0. 0. 0.]] [[0. 0. 0.] [0. 2. 0.]]]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++中派生类对基类成员的访问方式]]></title>
    <url>%2F2019%2F01%2F16%2Fc-%E4%B8%AD%E6%B4%BE%E7%94%9F%E7%B1%BB%E5%AF%B9%E5%9F%BA%E7%B1%BB%E6%88%90%E5%91%98%E7%9A%84%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[c++中派生类对基类成员的方式形式主要有以下两种： 1.内部访问：有派生类中新增成员对基类继承类的成员的访问。 2.对象访问：在派生类外部，通过派生类的对象从基类继承来的成员的访问。 某个类对其继承而来的成员的访问权限受到两个因素的影响： 1.在基类中该成员的访问说明符。 2.在派生类的派生列表中的访问说明符 一.私有继承的访问规则当类的继承方式为私有继承时，基类的public成员和protected成员被继承后成为派生类的private成员，派生类的其它成员可以直接访问它们，但是在类的外部通过派生类的对象无法访问。基类的private成员在私有派生类中是不可直接访问的，所以无论是派生类的成员还是通过派生类的对象，都无法直接访问从基类继承来的private成员，但是可以通过基类提供的public成员函数间接访问。私有继承的访问规则总结如下： 基类成员 private成员 public成员 protected成员 内部访问 不可访问 可访问 可访问 对象访问 不可访问 不可访问 不可访问 二.公有继承的访问规则当类的继承方式为公有继承时，基类的public成员和protected成员被继承到派生类中仍作为派生类的public成员和protected成员，派生类的其它成员可以直接访问它们。但是，类的外部使用者只能通过派生类的对象访问继承来的public成员。基类的private成员在私有派生类中是不可直接访问的，所以无论是派生类成员还是派生类的对象，都无法直接访问从基类继承来的private成员，但是可以通过基类提供的public成员函数直接访问它们。公有继承的访问规则总结如下： 基类成员 private成员 public成员 protected成员 内部访问 不可访问 可访问 可访问 对象访问 不可访问 可访问 不可访问 三.保护继承的访问规则 当类的继承方式为保护继承时，基类的public成员和protected成员被继承到派生类中都作为派生类的protected成员，派生类的其它成员可以直接访问它们，但是类的外部使用者不能通过派生类的对象访问它们。基类的private成员在私有派生类中是不可直接访问的，所以无论是派生类成员还是通过派生类的对象，都无法直接访问基类中的private成员。保护继承的访问规则总结如下： 基类成员 private成员 public成员 protected成员 内部访问 不可访问 可访问 可访问 对象访问 不可访问 不可访问 不可访问 四.总结按规矩，我们来总结一下：派生类访问说明符(在派生类的派生列表中的访问说明符)对于派生类的成员(派生类的内部)能否访问它的直接基类的成员没有什么影响，对基类成员的访问权限只与基类中的访问说明符有关；派生类的对象对基类成员的访问权限受到派生类访问说明符和基类中的访问说明符共同决定。]]></content>
  </entry>
  <entry>
    <title><![CDATA[c++的抽象类、虚函数、虚基类和java的抽象类、接口]]></title>
    <url>%2F2019%2F01%2F16%2Fc-%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E8%99%9A%E5%87%BD%E6%95%B0%E3%80%81%E8%99%9A%E5%9F%BA%E7%B1%BB%E5%92%8Cjava%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[先做一个简单的整理，后面再更新 c++虚函数 == java普通函数 c++纯虚函数 == java抽象函数 c++抽象类 == java抽象类 c++虚基类（全部是纯虚函数） == java接口 未完待续。。。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyinstaller使用过程中踩的那些坑]]></title>
    <url>%2F2019%2F01%2F15%2Fpyinstaller%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B8%A9%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[有时候我们需要将自己写的python脚本编译成可执行文件，这样一来，我们可以在没有python解释器的系统中来运行这个python脚本，是不是很方便呢？下面就来记录下本人在使用pyinstaller过程中遇到的那些坑，纯属记录，对pyinstaller的原理不进行具体阐述。 首先来说明以下需求：基于tensorflow框架，实现LeNet-5网络去训练MNIST数据集并做测试；然后将训练和测试脚本在windows上编译成.exe的可执行程序。 可想而知，在这过程中肯定会用到一些常见的第三方库，例如：tensorflow、numpy、cv2等等。 假定已经安装好pyinstaller，并且完成源代码的编写。下面是源代码目录： 命令行进入到该目录下并输入： pyinstaller –onefile –nowindowed lenet5_train.py 编译好之后，会多处几个文件： 坑一在dist目录下就会出现我们要的.exe文件，点击运行，稍等片刻，但是会报错no modual named “tensorflow.contrib” 解决方案是：打开lenet5_train.spec文件将hiddenimports=[]改成hiddenimports=[‘tensorflow.contrib’],然后在命令行重新编译这个.spec文件： pyinstaller lenet5_train.spec ps:基于上面这个错误和解决方案，我自己大胆的做了个预测（没有实践，不知道是不是酱紫）：在编译成功的前提下，也就是能够得到.exe文件，如果运行这个.exe报no modual named xxx的错的话，就把这个modual加入到hiddenimports里面，多个modual用逗号隔开。实践才是检验真理的唯一标准，赶紧去试试吧！！！ 坑二运行.exe时说在某某路径下找不到该文件，解决方案是将脚本中的相对路径改成绝对路径。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入浅出const关键字对c++成员函数的修饰]]></title>
    <url>%2F2019%2F01%2F15%2F%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAconst%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%B9c-%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E7%9A%84%E4%BF%AE%E9%A5%B0%2F</url>
    <content type="text"><![CDATA[const对c++成员函数的修饰分为三种：1.修饰参数 2.修饰返回值 3.修饰this指针。下面来简单的谈谈相关知识点。 1.对函数参数的修饰 const只能用来修饰输入型参数。输出型参数不能用const来修饰。(关于输入、输出型参数，详见本文末) 如果传入的形参采用“指针传递”，那么加const修饰可以防止意外地改动该指针，起到保护作用。 如果输入的形参采用“值传递”，函数将产生临时变量，复制该参数的值并且压入函数栈。函数中使用该参数时，访问的时函数栈中临时变量的值，原变量无需保护，所以不要加const修饰。 基本变量类型的参数作为“值传递”的输入参数，无需采用引用。自定义变量类型（class类型，struct类型）参数作为“值传递“的输入参数，最好采用”const+引用“格式，即void func(const Student &amp;s)。原因是自定义变量类型作为值传递的时候，涉及创建临时变量，构造，复制，析构，这些过程很耗时间。 ​ 从函数栈的基本原理来考虑。我们知道，函数在被调用时，会为创建各个实参创建临时变量并将其压入函数栈。如果是基本变量类型，则压入函数栈的临时变量中存储的是实参的副本；如果是自定义变量类型，则会在堆上创建该类型实例，复制该参数到堆上，然后将堆上该实例的地址压入函数栈；如果是指针，则会将指针地址的副本压入函数栈。 ​ 也就是说，函数栈上要么保存的是一个基本类型参数的副本，要么是个顶层指针。对于函数栈上保存的参数，实参的副本可以作为一个普通的局部变量，是可以修改值的，而对于指针变量，其可以视为顶层指针，本身的值不可以修改，但它指向的值可以修改。 ​ 所以，对于基本变量类型，函数内部操作的是函数栈上的副本，不会对原值产生影响，对于类类型（非指针输入性参数），操作的也是函数栈上的地址指向的实例副本，同样不会对原值产生影响；而对于指针，函数内部虽然改变不了指针变量保存的指针值（该指针为顶层指针），但该指针却指向的是原值的地址，故而能修改原值。 ​ 对于引用， a). 引用不是对象，只是变量的一个别名，引用指向原变量的地址，不会进行新的内存分配和变量拷贝； b). 引用申明后必须马上初始化； c). 引用一经定义，不能改变其值，也就是不能再作为其它变量的引用；d). 通过引用可以完全操作原变量。 ​ 可以看出，当占空间很大的变量作为实参传入函数时，很适合引用传递。因为用引用传递时，只是传递变量本身的一个别名，不会进行新变量的内存分配，构造，赋值，析构等操作。 ​ 如果函数中不允许改变该实参，那么就应在引用参数上加const修饰。 ​ 基于上面的考虑。const修饰形参时，只需要修改指针类型和引用类型即可（虽然不是强制，但是对输入型指针或者引用参数用const修饰应该成为一种习惯）。同时，这也说明一个编程时应该养成的习惯，对于输入型参数，应该在函数起始位置定义一个局部变量接受该输入型参数，而不是直接使用。 2.对返回值的修饰这个应用比较少。大部分返回值采用的时“值传递”。如果将返回值修饰为const，那么接收返回值的变量也必须定义为const。 3.对this指针的修饰我们知道，c++成员函数在编译的时候，会传入一个this指针，指向实例本身，默认情况下，this的类型是指向类类型非常量版本的常量指针(顶层指针)。例如，有一个类Studen，那么this的类型是Student *const; 即this指针指向实例本身并且不可修改，但可以通过this指针修改其指向的成员变量。在成员函数内部访问成员变量var，实际上是如下形式访问的：this-&gt;var。如果我们设计一个成员函数时，不想让其修改成员变量，那么就应该将this指针定义为底层指针。c++定义的方式就是在函数的参数列表后加上const，即：void func(…) const; 4.总结以下是const成员函数注意的几点： const对象只能访问const成员函数,而非const对象可以访问任意的成员函数,包括const成员函数。即对于class Student, 有 const Student s1;那么s1只能访问Student的const成员函数。而对于Student s2; s2可以访问任何成员函数。 const对象的成员变量不可以修改。 mutable修饰的成员变量，在任何情况下都可以修改。也就是说，const成员函数也可以修改mutable修饰的成员变量。c++很shit的地方就是mutable和friendly这样的特性，很操蛋。 const成员函数可以访问const成员变量和非const成员变量，但不能修改任何变量。检查发生在编译时。 非const成员函数可以访问非const对象的非const数据成员、const数据成员，但不可以访问const对象的任意数据成员。 const成员函数只是用于非静态成员函数，不能用于静态成员函数。 const成员函数的const修饰不仅在函数声明中要加（包括内联函数），在类外定义出也要加。 作为一种良好的编程风格，在声明一个成员函数时，若该成员函数并不对数据成员进行修改操作，应尽可能将该成员函数声明为const 成员函数。 输入、输出型参数一般来说，函数的输入部分就是函数的参数，输出部分就是返回值，问题是如果函数的参数可以有很多个，而返回值只能有一个，这就会让我们无法让一个函数返回多个值。现实编程中，一个函数需要返回多个值是非常普遍的，通常的做法是用参数来返回。如果这个参数是用来做输入的，也叫做输入型参数，用来做输出的就叫做输出型参数。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装cuda和cudnn]]></title>
    <url>%2F2019%2F01%2F14%2F%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn%2F</url>
    <content type="text"><![CDATA[服务器上在自己的目录下面(即:没有root权限)安装cuda。 在nvidia官网下载对应的版本 在自己的目录下建立一个文件夹（我的路径是：/home/lxm/.local/cuda-8.0/）存放上面下载好的文件cuda_8.0.44_linux.run。然后shell进入当前目录（/home/lxm/.local/cuda-8.0/），首先运行 export PERL5LIB=. ​ 再运行 chmod a+x cuda_8.0.44_linux.run 运行 sh /home/lxm/.local/cuda-8.0/cuda_8.0.44_linux.run –tmpdir=/home/lxm/.local/cuda-8.0/temp/ –override 这里加了–tmpdir主要是直接运行”sh /home/lxm/.local/cuda-8.0/cuda_8.0.44_linux.run”会提示空间不足的错误。执行后会有一系列提示让你确认，非常非常非常非常关键的地方是是否安装361这个低版本的驱动 只在是否安装toolkit那步填y其它都是n 安装完毕后，再声明一下环境变量，并将其写入到 ~/.bash_profile 的尾部:export LD_LIBRARY_PATH=/home/lxm/.local/cuda-8.0/lib64:$LD_LIBRARY_PATH 将cudnn复制到cuda里面： ​ 1.cp /home/lxm/.local/cuda/include/cudnn.h /home/lxm/.local/cuda-8.0/include/ ​ 2.cp /home/lxm/.local/cuda/lib64/libcudnn* /home/lxm/.local/cuda-8.0/lib64/ ​ 更新软连接： ​ 1.删除 /home/lxm/.local/cuda-8.0/lib64/下libcudnn.so 和libcudnn.so.6 ​ ​ 2.命令行进入当前目录（/home/lxm/.local/cuda-8.0/lib64/）：先运行 ln -s libcudnn.so.6.0.21 libcudnn.so.6再运行ln -s libcudnn.so.6 libcudnn.so]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下安装virtualenv以及virtualenvwrapper]]></title>
    <url>%2F2019%2F01%2F14%2Flinux%E4%B8%8B%E5%AE%89%E8%A3%85virtualenv%E4%BB%A5%E5%8F%8Avirtualenvwrapper%2F</url>
    <content type="text"><![CDATA[0.前言当我们的机器上同时安装多个版本的Python的时候，使用起来很不方便，尤其是每个工程需要的Python版本不同，依赖的包也不一样，这时候如果安装了virtualenv的话，就很方便了，它是独立于系统的一个虚拟环境，在这虚拟环境里面安装的各种依赖包都不会影响系统里的环境。 一.安装virtualenv pip install virtualenv 二.使用假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做： 创建目录 mkdir myproject cd myproject 创建一个独立的Python运行环境，命名为env virtualenv –python=python3.5 –system-site-packages env –python 参数用来指定虚拟环境使用哪个版本的解释器 –system-site-packages 参数会将系统中的python的第三方库复制过来。如果不想把系统中的第三方库复制过来，可以用–no-site-packages来代替–system-site-packages，这样就会得到一个不带任何第三方库的“干净”的python运行环境。新建的python环境被放到当前的目录下的env目录。有了这个env，可以用source进入该环境 source /env/bin/activate 这时命令提示符变了，有个(env)前缀，表示当前环境是一个名为env的python环境。 在env环境下，用pip安装的包被安装到env环境下，系统python环境不受任何影响。 退出当前的env环境 deactivate 三.安装virtualenvwrappervirtualenvwrapper是virtualenv的扩展包，用于更方便的管理虚拟环境，可以做： 1.将所有虚拟环境整合到一个目录下 2.管理（新增，删除，复制）虚拟环境 3.快速切换虚拟环境 。。。 安装 pip install virtualenvwrapper 创建目录用来存放虚拟环境 mkdir ~/.virtualenvs 在.bashrc中添加如下环境变量 export WORKON_HOME=~/.virtualenvs source /home/lxm/.local/bin/virtualenvwrapper.sh 是的添加进去的环境变量生效 source ~/.bashrc 到目前为止，virtualenvwrapper就可以使用了 四. virtualenvwrapper常见命令 workon: 列出虚拟环境列表 mkvirtualenv: 新建虚拟环境 workon [虚拟环境名称]: 切换虚拟环境 rmvirtualenv[虚拟环境名称]: 删除虚拟环境 deavtivate: 离开虚拟环境]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring安装和配置教程]]></title>
    <url>%2F2019%2F01%2F11%2Fspring%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.去官网下载对应版本的安装包(http://repo.spring.io/libs-release-local/org/springframework/spring/) 2.打开eclipse-》help-》install new software-》add-》archive 选择spring安装包]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全局变量、全局静态变量、局部静态变量、局部变量的区别和联系]]></title>
    <url>%2F2019%2F01%2F10%2F%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%85%A8%E5%B1%80%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[从作用域角度来看全局变量：作用于整个程序，如果一个程序有多个源文件(即多个.cpp文件)，那么全局变量在所有的源文件中都是可见的，但是有一点要注意，在一个文件中定义的全局变量，如果要在另外的文件中使用，则必须用extern关键字再次申明一下。 全局静态变量：作用于定义它的这个源文件，如果一个程序有多个源文件，则全局静态变量在其它源文件中不可见，所以如果一个程序只有一个源文件，那么全局变量和全局静态变量的作用域是一样的。 局部静态变量：具有局部作用域，他只被初始化一次，自从初始化直到程序结束一直存在，即它的生命周期程序运行就存在，程序结束就结束。 局部变量：也具有局部作用域，它在程序运行期间不是一直存在，函数的一次调用结束后，变量就被撤销，所占内存也被撤回。 从内存分配来看全局变量、全局静态变量、局部静态变量都存在静态存储区，而局部变量在栈空间 除了静态内存和栈内存，每个程序还拥有一个内存池。这部分存储空间被称作自由空间或堆(heap)。堆空间用来存储动态分配的对象(例如new的对象)。静态内存和栈内存由编译器自动释放空间，而堆空间必须手动释放。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c/c++中有符号数转化为无符号数]]></title>
    <url>%2F2019%2F01%2F07%2F%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E8%BD%AC%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在讲有符号数和无符号数转化之前，先来回顾下什么是原码、反码、补码 一：原码、反码、补码简单总结一下这三者之间的关系，不具体展开。 正数的原码、反码和补码一致。 如果一个数是负数，它的原码：最高为是符号为（0表示正数，1表述负数），其余位是其绝对值的二进制形式；反码：原码符号位不变，其余位取反；补码：反码符号位不变，然后+1。 二：有符号数转化为无符号数记住一个规则即可：保持二进制位值不变，只改变解释位的方式。 怎么去理解这条规则呢？不管三七二十一，上来就把int型整数写成补码形式（再次强调，计算机中所有的数都是以补码形式存储的） 如果是正数，那么转化前后是一样的 如果是负数，有符号数转无符号数时将补码的最高为不再看成符号位而是值，再将补码转成原码即是答案。 下面看几个例子： 上面这个程序输出的结果是 4294967293 在64bit的机器上，int型是32bit，所以-3的原码是10000000000000000000000000000011;反码是11111111111111111111111111111100;补码是11111111111111111111111111111101;接下来按照无符号位来解释这个补码，也就是2^32-3=4294967293 尽管我们不会故意把一个无符号对象赋值一个负数，但是实际上却可能（特别容易）写出这样的代码。例如，当一个算术表达式中既有无符号数也有int值时，那个int值就会被转化成无符号数。 上面这个程序输出结果是 4294967264 相加前将-42转化为无符号数，再做加法。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈c++中取模运算和取余运算]]></title>
    <url>%2F2019%2F01%2F07%2Fc%2B%2B%E7%9A%84%E6%A8%A1%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[我们先抛开具体的开发语言不谈，先谈谈在数学里，什么叫做模运算。在数学里，取模运算和取余运算两个概念有重叠的部分但又不完全一致。主要区别在于对负整数进行除法运算时操作不同。 对于整型a,b来说，取模运算或者取余运算的方法都是： 1.求整数商：q=a/b; 2.计算模或者余数：r=a-q*b; 求模运算和求余运算不同之处在于第一步：取余运算在取q时，向0方向舍入（fix()函数）；而取模运算向负无穷方向舍入(floor()函数). 下面来看一个例子就清楚了，计算-7 mod 4,那么a=-7;b=4; 1.q=-2(取模运算)，q=-1(取余运算)； 2.r=1(取模运算),r=-3(取余运算) 总结一下：当a和b符号一致时，求模运算和求余运算所得q的值一致，因此结果一致； 当符号不一致时，求模运算和符号和b一致，求余运算的符号和a一致。另外有个值得注意的地方：各个环境下%运算符的含义不同，比如c,c++,java是取余运算，而python是取模运算。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
</search>
